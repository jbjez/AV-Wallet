// lib/pages/calculator_page.dart
// ---------------------------------------------------------------
// Calculatrice AV Wallet - style bleu nuit + unités rapides AV
// ---------------------------------------------------------------

import 'package:flutter/material.dart';                                  // [L01]
import '../widgets/custom_app_bar.dart';
import '../widgets/uniform_bottom_nav_bar.dart';
import '../widgets/export_widget.dart';

class CalculatorPage extends StatefulWidget {                             // [L03]
  const CalculatorPage({super.key});                                      // [L04]
  @override
  State<CalculatorPage> createState() => _CalculatorPageState();          // [L05]
}

class _CalculatorPageState extends State<CalculatorPage> {                // [L07]
  static const Color darkBlue = Color(0xFF0A1128);                        // [L08]
  static const Color glass = Color.fromARGB(140, 255, 255, 255);          // [L09]
  static const EdgeInsets pad = EdgeInsets.symmetric(horizontal: 16);     // [L10]

  String _display = '0';                                                  // [L12]
  double? _accumulator;                                                   // [L13]
  String? _pendingOp;                                                     // [L14]
  bool _replaceOnNextDigit = false;                                       // [L15]
  final List<String> _calculationHistory = [];                                  // [L16]

  // ----------------------- Helpers calcul ----------------------          // [L17]
  void _inputDigit(String d) {                                            // [L18]
    setState(() {                                                         // [L19]
      if (_replaceOnNextDigit || _display == '0') {                       // [L20]
        _display = d;                                                     // [L21]
        _replaceOnNextDigit = false;                                      // [L22]
      } else {                                                            // [L23]
        _display += d;                                                    // [L24]
      }                                                                   // [L25]
    });                                                                   // [L26]
  }                                                                       // [L27]

  void _inputDot() {                                                      // [L29]
    setState(() {                                                         // [L30]
      if (_replaceOnNextDigit) {                                          // [L31]
        _display = '0.';                                                  // [L32]
        _replaceOnNextDigit = false;                                      // [L33]
      } else if (!_display.contains('.')) {                               // [L34]
        _display += '.';                                                  // [L35]
      }                                                                   // [L36]
    });                                                                   // [L37]
  }                                                                       // [L38]

  double _asNumber() {                                                    // [L40]
    final sanitized = _display.replaceAll(RegExp(r'[^0-9\.\-]'), '');     // [L41]
    return double.tryParse(sanitized) ?? 0.0;                             // [L42]
  }                                                                       // [L43]

  void _clear() {                                                         // [L45]
    setState(() {                                                         // [L46]
      _display = '0';                                                     // [L47]
      _accumulator = null;                                                // [L48]
      _pendingOp = null;                                                  // [L49]
      _replaceOnNextDigit = false;                                        // [L50]
    });                                                                   // [L51]
  }                                                                       // [L52]

  void _toggleSign() {                                                    // [L54]
    setState(() {                                                         // [L55]
      final n = _asNumber() * -1;                                         // [L56]
      _display = _format(n);                                              // [L57]
    });                                                                   // [L58]
  }                                                                       // [L59]

  void _percent() {                                                       // [L61]
    setState(() {                                                         // [L62]
      final n = _asNumber() / 100.0;                                      // [L63]
      _display = _format(n);                                              // [L64]
      _replaceOnNextDigit = true;                                         // [L65]
    });                                                                   // [L66]
  }                                                                       // [L67]

  String _format(double n) {                                              // [L69]
    final s = n.toStringAsFixed(10);                                      // [L70]
    var trimmed = s.replaceFirst(RegExp(r'\.?0+$'), '');                  // [L71]
    if (trimmed == '-0') trimmed = '0';                                   // [L72]
    return trimmed;                                                       // [L73]
  }                                                                       // [L74]

  void _operate(String op) {                                              // [L76]
    setState(() {                                                         // [L77]
      final current = _asNumber();                                        // [L78]
      if (_accumulator == null) {                                         // [L79]
        _accumulator = current;                                           // [L80]
      } else if (_pendingOp != null) {                                    // [L81]
        _accumulator = _eval(_accumulator!, current, _pendingOp!);        // [L82]
        _display = _format(_accumulator!);                                // [L83]
      }                                                                   // [L84]
      _pendingOp = op;                                                    // [L85]
      _replaceOnNextDigit = true;                                         // [L86]
    });                                                                   // [L87]
  }                                                                       // [L88]

  void _equals() {                                                        // [L90]
    setState(() {                                                         // [L91]
      if (_accumulator != null && _pendingOp != null) {                   // [L92]
        final current = _asNumber();                                      // [L93]
        final result = _eval(_accumulator!, current, _pendingOp!);        // [L94]
        _calculationHistory.add('${_format(_accumulator!)} ${_pendingOp!} ${_format(current)} = ${_format(result)}'); // [L95]
        _accumulator = result;                                            // [L96]
        _display = _format(_accumulator!);                                // [L97]
        _pendingOp = null;                                                // [L98]
        _replaceOnNextDigit = true;                                       // [L99]
      }                                                                   // [L100]
    });                                                                   // [L101]
  }                                                                       // [L102]

  double _eval(double a, double b, String op) {                           // [L102]
    switch (op) {                                                         // [L103]
      case '+': return a + b;                                             // [L104]
      case '-': return a - b;                                             // [L105]
      case '×': return a * b;                                             // [L106]
      case '÷': return b == 0 ? 0 : a / b;                                // [L107]
      default: return b;                                                  // [L108]
    }                                                                     // [L109]
  }                                                                       // [L110]

  // ----------------------- Raccourcis AV -----------------------          // [L112]
  void _appendUnit(String unit) {                                         // [L113]
    setState(() { _display = '${_format(_asNumber())} $unit'; });         // [L114]
  }                                                                       // [L115]

  void _ampsFromWatts230V() {                                             // [L117]
    final watts = _asNumber();                                            // [L118]
    final amps = watts / 230.0;                                           // [L119]
    setState(() { _display = '${_format(amps)} A'; });                    // [L120]
  }                                                                       // [L121]


  // --------------------------- UI --------------------------------        // [L131]
  @override
  Widget build(BuildContext context) {                                     // [L132]
    return Scaffold(                                                       // [L133]
      backgroundColor: darkBlue,                                           // [L134]
      appBar: CustomAppBar(
        customIcon: const Icon(Icons.calculate, color: Colors.white, size: 28),
      ),                                                                   
      body: Container(                                                    // [L141]
        decoration: const BoxDecoration(                                   // [L142]
          color: darkBlue,                                                 // [L143]
        ),                                                                 // [L144]
        child: SafeArea(                                                   // [L145]
          child: Column(                                                   // [L146]
            children: [                                                    // [L147]
              const SizedBox(height: 12),                                  // [L148]
              _displayPanel(),                                             // [L149]
              const SizedBox(height: 8),                                   // [L150]
              _avChips(),                                                  // [L151]
              const SizedBox(height: 8),                                   // [L152]
              Expanded(child: _keypad()),                                  // [L153]
              Padding(                                                     // [L154]
                padding: pad,                                              // [L155]
                child: ExportWidget(                                       // [L156]
                  title: 'Historique des calculs',                         // [L157]
                  content: _calculationHistory.isEmpty                     // [L158]
                    ? 'Aucun calcul effectué'                              // [L159]
                    : _calculationHistory.join('\n'),                      // [L160]
                  fileName: 'calculs_${DateTime.now().millisecondsSinceEpoch}', // [L161]
                ),                                                         // [L162]
              ),
              const SizedBox(height: 12),                                  // [L169]
            ],                                                             // [L170]
          ),                                                               // [L171]
        ),                                                                 // [L172]
      ),
      bottomNavigationBar: const UniformBottomNavBar(currentIndex: 6),
    );                                                                     // [L182]
  }                                                                        // [L183]

  Widget _displayPanel() {                                                 // [L185]
    return Container(                                                      // [L186]
      width: double.infinity,                                              // [L187]
      margin: pad,                                                         // [L188]
      padding: const EdgeInsets.all(16),                                   // [L189]
      decoration: BoxDecoration(                                           // [L190]
        color: glass,                                                      // [L191]
        borderRadius: BorderRadius.circular(16),                           // [L192]
        border: Border.all(color: Colors.white, width: 1.5),               // [L193]
      ),                                                                   // [L194]
      child: Align(                                                        // [L195]
        alignment: Alignment.centerRight,                                  // [L196]
        child: Text(                                                       // [L197]
          _display,                                                        // [L198]
          style: const TextStyle(                                          // [L199]
            color: Colors.white,                                           // [L200]
            fontSize: 48,                                                  // [L201]
            fontFeatures: [FontFeature.tabularFigures()],                  // [L202]
          ),                                                               // [L203]
        ),                                                                 // [L204]
      ),                                                                   // [L205]
    );                                                                     // [L206]
  }                                                                        // [L207]

  Widget _avChips() {                                                      // [L209]
    return Padding(                                                        // [L210]
      padding: pad,                                                        // [L211]
      child: Wrap(                                                         // [L212]
        spacing: 8,                                                        // [L213]
        runSpacing: 8,                                                     // [L214]
        children: [                                                        // [L215]
          _chip('kg', () => _appendUnit('kg')),                            // [L216]
          _chip('W', () => _appendUnit('W')),                              // [L217]
          _chip('A @230V', _ampsFromWatts230V),                            // [L218]
          _chip('m', () => _appendUnit('m')),                              // [L219]
          _chip('m²', () => _appendUnit('m²')),                            // [L220]
          _chip('lux', () => _appendUnit('lux')),                          // [L221]
          _chip('px', () => _appendUnit('px')),                            // [L222]
        ],                                                                 // [L223]
      ),                                                                   // [L224]
    );                                                                     // [L225]
  }                                                                        // [L226]

  Widget _chip(String label, VoidCallback onTap) {                         // [L228]
    return GestureDetector(                                                // [L229]
      onTap: onTap,                                                        // [L230]
      child: Container(                                                    // [L231]
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),  // [L232]
        decoration: BoxDecoration(                                         // [L233]
          color: glass,                                                    // [L234]
          borderRadius: BorderRadius.circular(12),                         // [L235]
          border: Border.all(color: Colors.white, width: 1.2),             // [L236]
        ),                                                                 // [L237]
        child: Text(                                                       // [L238]
          label,                                                           // [L239]
          style: const TextStyle(color: Colors.white),                     // [L240]
        ),                                                                 // [L241]
      ),                                                                   // [L242]
    );                                                                     // [L243]
  }                                                                        // [L244]

  Widget _keypad() {                                                       // [L246]
    final keys = <_KeyDef>[                                                // [L247]
      _KeyDef('C', onTap: _clear, kind: KeyKind.fn),                       // [L248]
      _KeyDef('±', onTap: _toggleSign, kind: KeyKind.fn),                  // [L249]
      _KeyDef('%', onTap: _percent, kind: KeyKind.fn),                     // [L250]
      _KeyDef('÷', onTap: () => _operate('÷'), kind: KeyKind.op),          // [L251]
      _KeyDef('7', onTap: () => _inputDigit('7')),                         // [L252]
      _KeyDef('8', onTap: () => _inputDigit('8')),                         // [L253]
      _KeyDef('9', onTap: () => _inputDigit('9')),                         // [L254]
      _KeyDef('×', onTap: () => _operate('×'), kind: KeyKind.op),          // [L255]
      _KeyDef('4', onTap: () => _inputDigit('4')),                         // [L256]
      _KeyDef('5', onTap: () => _inputDigit('5')),                         // [L257]
      _KeyDef('6', onTap: () => _inputDigit('6')),                         // [L258]
      _KeyDef('-', onTap: () => _operate('-'), kind: KeyKind.op),          // [L259]
      _KeyDef('1', onTap: () => _inputDigit('1')),                         // [L260]
      _KeyDef('2', onTap: () => _inputDigit('2')),                         // [L261]
      _KeyDef('3', onTap: () => _inputDigit('3')),                         // [L262]
      _KeyDef('+', onTap: () => _operate('+'), kind: KeyKind.op),          // [L263]
      _KeyDef('0', onTap: () => _inputDigit('0'), flex: 2),                // [L264]
      _KeyDef('.', onTap: _inputDot),                                      // [L265]
      _KeyDef('=', onTap: _equals, kind: KeyKind.eq),                      // [L266]
    ];                                                                     // [L267]

    return Padding(                                                        // [L269]
      padding: pad,                                                        // [L270]
      child: LayoutBuilder(                                                // [L271]
        builder: (context, c) {                                            // [L272]
          final width = c.maxWidth;                                        // [L273]
          final colW = (width - 3 * 8) / 4;                                // [L274]
          return Wrap(                                                     // [L275]
            spacing: 8,                                                    // [L276]
            runSpacing: 8,                                                 // [L277]
            children: keys.map((k) {                                       // [L278]
              final w = k.flex == 2 ? colW * 2 + 8 : colW;                 // [L279]
              return SizedBox(                                             // [L280]
                width: w,                                                  // [L281]
                height: 56,                                                // [L282]
                child: _GlassButton(                                       // [L283]
                  label: k.label,                                          // [L284]
                  onTap: k.onTap,                                          // [L285]
                  kind: k.kind,                                            // [L286]
                ),                                                         // [L287]
              );                                                           // [L288]
            }).toList(),                                                   // [L289]
          );                                                               // [L290]
        },                                                                 // [L291]
      ),                                                                   // [L292]
    );                                                                     // [L293]
  }                                                                        // [L294]
}

// ======================= Widgets utilitaires =======================      // [L297]
enum KeyKind { num, op, fn, eq }                                           // [L298]

class _KeyDef {                                                            // [L300]
  final String label;                                                      // [L301]
  final VoidCallback onTap;                                                // [L302]
  final int flex;                                                          // [L303]
  final KeyKind kind;                                                      // [L304]
  _KeyDef(this.label, {required this.onTap, this.flex = 1, this.kind = KeyKind.num}); // [L305]
}                                                                          // [L306]

class _GlassButton extends StatelessWidget {                                // [L308]
  final String label;                                                       // [L309]
  final VoidCallback onTap;                                                 // [L310]
  final KeyKind kind;                                                       // [L311]
  const _GlassButton({required this.label, required this.onTap, required this.kind}); // [L312]

  @override
  Widget build(BuildContext context) {                                      // [L314]
    final isOp = kind == KeyKind.op;                                       // [L315]
    final isEq = kind == KeyKind.eq;                                       // [L316]
    return GestureDetector(                                                // [L317]
      onTap: onTap,                                                        // [L318]
      child: Container(                                                    // [L319]
        alignment: Alignment.center,                                       // [L320]
        decoration: BoxDecoration(                                         // [L321]
          color: _StateColors.bg(kind),                                    // [L322]
          borderRadius: BorderRadius.circular(14),                         // [L323]
          border: Border.all(color: Colors.white.withOpacity(0.9), width: 1.2), // [L324]
        ),                                                                 // [L325]
        child: Text(                                                       // [L326]
          label,                                                           // [L327]
          style: TextStyle(                                                // [L328]
            color: isEq ? Colors.black87 : Colors.white,                   // [L329]
            fontSize: 18,                                                  // [L330]
            fontWeight: isOp || isEq ? FontWeight.w700 : FontWeight.w500,  // [L331]
          ),                                                               // [L332]
        ),                                                                 // [L333]
      ),                                                                   // [L334]
    );                                                                     // [L335]
  }                                                                         // [L336]
}

class _StateColors {                                                       // [L338]
  static const glass = Color.fromARGB(140, 255, 255, 255);                 // [L339]
  static Color bg(KeyKind k) {                                             // [L340]
    switch (k) {                                                           // [L341]
      case KeyKind.op: return glass;                                       // [L342]
      case KeyKind.eq: return Colors.amber;                                // [L343]
      case KeyKind.fn: return glass;                                       // [L344]
      case KeyKind.num: return glass;                                      // [L345]
    }                                                                      // [L346]
  }                                                                        // [L347]
}
